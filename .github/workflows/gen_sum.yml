# .github/workflows/weekly-summary.yml
name: Generate Upstream Release Summary

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Runs on a schedule (every Friday at 23:00 UTC)
  schedule:
    - cron: '0 23 * * 5'

jobs:
  create-summary-file:
    runs-on: ubuntu-latest
    steps:
      # 1. Checks out your repository's code so it can commit a file
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Generates the file name using the current date
      - name: Set up file name
        id: file_details
        run: echo "filename=summaries/weekly-$(date +'%Y-%m-%d').md" >> $GITHUB_ENV

      # 3. Fetches the PRs merged in the last 7 days from the target repo
      - name: Fetch Merged PRs from Upstream
        id: fetch_prs
        env:
          # This token is required to make API requests to GitHub
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # !!! IMPORTANT: Change this to the repository you want to track !!!
          UPSTREAM_REPO: "vllm-project/vllm"
        run: |
          summary_header="## Weekly Summary for ${{ env.UPSTREAM_REPO }} ($(date +'%Y-%m-%d'))"
          
          # Fetches PRs and formats them into a Markdown list
          prs=$(gh pr list --repo $UPSTREAM_REPO --limit 500 \
            --search "is:pr is:merged merged:>=$(date -d '7 days ago' +%Y-%m-%d)" \
            --json number,title,author,url \
            --template '{{range .}}* {{.title}} (#{{.number}}) by @{{.author.login}}\n{{end}}')

          # Use special syntax to preserve multiline output for the next step
          {
            echo "summary<<EOF"
            echo -e "$summary_header\n\n$prs"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # 4. Commits the new summary file to your repository
      - name: Commit summary file
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Add weekly summary for ${{ env.filename }}"
          file_pattern: ${{ env.filename }}
          # This creates the file with the content from the previous step
          commit_user_name: "Weekly Summary Bot"
          commit_user_email: "actions@github.com"
          commit_options: '--no-verify'
          # Use the output from the fetch_prs step as the file content
          file_content: ${{ steps.fetch_prs.outputs.summary }}
