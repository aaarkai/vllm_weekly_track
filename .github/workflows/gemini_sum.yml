# .github/workflows/weekly-summary.yml
name: Generate Upstream Release Summary

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * 5" # Runs every Friday at 23:00 UTC

jobs:
  create-summary-file:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up file path
        id: file_details
        run: echo "filepath=summaries/weekly-$(date +'%Y-%m-%d').md" >> $GITHUB_ENV

      # MODIFIED STEP: This now creates the file directly.
      - name: Fetch PRs and Write to File
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          UPSTREAM_REPO: "vllm-project/vllm" # Using the repo from your log as an example
          TARGET_FILE: ${{ env.filepath }}
        run: |
          # Create the directory if it doesn't exist
          mkdir -p "$(dirname "$TARGET_FILE")"

          # Write the header to the new file
          echo "# Weekly Release Notes for ${{ env.UPSTREAM_REPO }} ($(date +'%Y-%m-%d'))" > "$TARGET_FILE"
          echo "" >> "$TARGET_FILE"

          # Fetch all merged PRs in the last 7 days
          echo "## What's Changed" >> "$TARGET_FILE"
          echo "" >> "$TARGET_FILE"

          # Create temporary files for each category
          FEATURES_FILE=$(mktemp)
          BUGS_FILE=$(mktemp)
          PERF_FILE=$(mktemp)
          DOCS_FILE=$(mktemp)
          OTHER_FILE=$(mktemp)

          # Fetch all PRs
          gh pr list --repo $UPSTREAM_REPO --limit 500 \
            --search "is:pr is:merged merged:>=$(date -d '7 days ago' +%Y-%m-%d)" \
            --json number,title,author,url \
            --template '{{range .}}* {{.title}} ([#{{.number}}]({{.url}})) by @{{.author.login}}{{""}}{{end}}' > /tmp/all_prs.txt

          # Check if we got any PRs
          if [ ! -s /tmp/all_prs.txt ]; then
              echo "* No PRs found for this week" >> "$TARGET_FILE"
          else
            # Read each line and categorize based on title prefixes
            while IFS= read -r line; do
              # Extract title from the line (remove the PR number, URL, and author part)
              # Format is: * Title (#number) by @author
              title=$(echo "$line" | sed -E 's/ \(\#.*$//' | sed 's/^[*] //')
              title_lower=$(echo "$title" | tr '[:upper:]' '[:lower:]')

              # Categorize based on title prefixes
              if [[ "$title_lower" == "feat:"* ]] || [[ "$title_lower" == "feat("* ]] || [[ "$title_lower" == "[feat"* ]] || [[ "$title_lower" == "feature:"* ]] || [[ "$title_lower" == "feature("* ]] || [[ "$title_lower" == "[feature"* ]] || [[ "$title_lower" == "add "* ]] || [[ "$title_lower" == "[add "* ]] || [[ "$title_lower" == "support "* ]] || [[ "$title_lower" == "[support "* ]] || [[ "$title_lower" == *"enable "* ]] || [[ "$title_lower" == *"implement "* ]] || [[ "$title_lower" == *"add:"* ]] || [[ "$title_lower" == *"support:"* ]]; then
                echo "$line" >> "$FEATURES_FILE"
              elif [[ "$title_lower" == "bug:"* ]] || [[ "$title_lower" == "bug("* ]] || [[ "$title_lower" == "[bug"* ]] || [[ "$title_lower" == "fix:"* ]] || [[ "$title_lower" == "fix("* ]] || [[ "$title_lower" == "[fix"* ]] || [[ "$title_lower" == "bugfix:"* ]] || [[ "$title_lower" == "bugfix("* ]] || [[ "$title_lower" == "[bugfix"* ]] || [[ "$title_lower" == "correct"* ]] || [[ "$title_lower" == "[correct"* ]] || [[ "$title_lower" == *"fix "* ]] || [[ "$title_lower" == *"fix:"* ]] || [[ "$title_lower" == *"bug "* ]]; then
                echo "$line" >> "$BUGS_FILE"
              elif [[ "$title_lower" == "perf:"* ]] || [[ "$title_lower" == "perf("* ]] || [[ "$title_lower" == "[perf"* ]] || [[ "$title_lower" == "performance:"* ]] || [[ "$title_lower" == "performance("* ]] || [[ "$title_lower" == "[performance"* ]] || [[ "$title_lower" == "optimize"* ]] || [[ "$title_lower" == "[optimize"* ]] || [[ "$title_lower" == "improve"* ]] || [[ "$title_lower" == "[improve"* ]] || [[ "$title_lower" == *"perf"* ]]; then
                echo "$line" >> "$PERF_FILE"
              elif [[ "$title_lower" == "doc:"* ]] || [[ "$title_lower" == "doc("* ]] || [[ "$title_lower" == "[doc"* ]] || [[ "$title_lower" == "documentation:"* ]] || [[ "$title_lower" == "documentation("* ]] || [[ "$title_lower" == "[documentation"* ]] || [[ "$title_lower" == "readme:"* ]] || [[ "$title_lower" == "readme("* ]] || [[ "$title_lower" == "[readme"* ]] || [[ "$title_lower" == *"doc "* ]] || [[ "$title_lower" == *"docs:"* ]] || [[ "$title_lower" == *"docs "* ]]; then
                echo "$line" >> "$DOCS_FILE"
              else
                echo "$line" >> "$OTHER_FILE"
              fi
            done < /tmp/all_prs.txt

            # Features section
            echo "### 🚀 Features & Enhancements" >> "$TARGET_FILE"
            echo "" >> "$TARGET_FILE"
            if [ -s "$FEATURES_FILE" ]; then
              cat "$FEATURES_FILE" >> "$TARGET_FILE"
            else
              echo "* No features or enhancements found this week" >> "$TARGET_FILE"
            fi
            echo "" >> "$TARGET_FILE"

            # Bug Fixes section
            echo "### 🐛 Bug Fixes" >> "$TARGET_FILE"
            echo "" >> "$TARGET_FILE"
            if [ -s "$BUGS_FILE" ]; then
              cat "$BUGS_FILE" >> "$TARGET_FILE"
            else
              echo "* No bug fixes found this week" >> "$TARGET_FILE"
            fi
            echo "" >> "$TARGET_FILE"

            # Performance Improvements section
            echo "### ⚡ Performance Improvements" >> "$TARGET_FILE"
            echo "" >> "$TARGET_FILE"
            if [ -s "$PERF_FILE" ]; then
              cat "$PERF_FILE" >> "$TARGET_FILE"
            else
              echo "* No performance improvements found this week" >> "$TARGET_FILE"
            fi
            echo "" >> "$TARGET_FILE"

            # Documentation section
            echo "### 📚 Documentation" >> "$TARGET_FILE"
            echo "" >> "$TARGET_FILE"
            if [ -s "$DOCS_FILE" ]; then
              cat "$DOCS_FILE" >> "$TARGET_FILE"
            else
              echo "* No documentation updates found this week" >> "$TARGET_FILE"
            fi
            echo "" >> "$TARGET_FILE"

            # Other PRs section
            echo "### 📦 Other Changes" >> "$TARGET_FILE"
            echo "" >> "$TARGET_FILE"
            if [ -s "$OTHER_FILE" ]; then
              cat "$OTHER_FILE" >> "$TARGET_FILE"
            else
              echo "* No other changes found this week" >> "$TARGET_FILE"
            fi
            echo "" >> "$TARGET_FILE"
          fi

          # Contributors section
          echo "## Contributors" >> "$TARGET_FILE"
          echo "" >> "$TARGET_FILE"
          gh pr list --repo $UPSTREAM_REPO --limit 500 \
            --search "is:pr is:merged merged:>=$(date -d '7 days ago' +%Y-%m-%d)" \
            --json author \
            --jq 'map(.author.login) | unique | map("@\(.)") | join(", ")' >> "$TARGET_FILE"

          # Clean up temporary files
          rm -f "$FEATURES_FILE" "$BUGS_FILE" "$PERF_FILE" "$DOCS_FILE" "$OTHER_FILE" /tmp/all_prs.txt

      # MODIFIED STEP: This now only needs to find the file, not create it.
      - name: Commit summary file
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: Add weekly summary for ${{ env.filepath }}"
          file_pattern: ${{ env.filepath }}
          commit_user_name: "Weekly Summary Bot"
          commit_user_email: "actions@github.com"
